//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RightsManagementSystem.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SysPersonToPosition))]
    [KnownType(typeof(SysDepartment))]
    [KnownType(typeof(SysPosition))]
    public partial class SysPosition: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public string ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private string _iD;
    
        [DataMember]
        public string PositionId
        {
            get { return _positionId; }
            set
            {
                if (_positionId != value)
                {
                    _positionId = value;
                    OnPropertyChanged("PositionId");
                }
            }
        }
        private string _positionId;
    
        [DataMember]
        public string PositionName
        {
            get { return _positionName; }
            set
            {
                if (_positionName != value)
                {
                    _positionName = value;
                    OnPropertyChanged("PositionName");
                }
            }
        }
        private string _positionName;
    
        [DataMember]
        public string ParentId
        {
            get { return _parentId; }
            set
            {
                if (_parentId != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentId", _parentId);
                    if (!IsDeserializing)
                    {
                        if (SysPositionParent != null && SysPositionParent.ID != value)
                        {
                            SysPositionParent = null;
                        }
                    }
                    _parentId = value;
                    OnPropertyChanged("ParentId");
                }
            }
        }
        private string _parentId;
    
        [DataMember]
        public string DepartmentId
        {
            get { return _departmentId; }
            set
            {
                if (_departmentId != value)
                {
                    ChangeTracker.RecordOriginalValue("DepartmentId", _departmentId);
                    if (!IsDeserializing)
                    {
                        if (SysDepartment != null && SysDepartment.ID != value)
                        {
                            SysDepartment = null;
                        }
                    }
                    _departmentId = value;
                    OnPropertyChanged("DepartmentId");
                }
            }
        }
        private string _departmentId;

        #endregion
        #region 导航属性
    
        [DataMember]
        public TrackableCollection<SysPersonToPosition> SysPersonToPosition
        {
            get
            {
                if (_sysPersonToPosition == null)
                {
                    _sysPersonToPosition = new TrackableCollection<SysPersonToPosition>();
                    _sysPersonToPosition.CollectionChanged += FixupSysPersonToPosition;
                }
                return _sysPersonToPosition;
            }
            set
            {
                if (!ReferenceEquals(_sysPersonToPosition, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_sysPersonToPosition != null)
                    {
                        _sysPersonToPosition.CollectionChanged -= FixupSysPersonToPosition;
                    }
                    _sysPersonToPosition = value;
                    if (_sysPersonToPosition != null)
                    {
                        _sysPersonToPosition.CollectionChanged += FixupSysPersonToPosition;
                    }
                    OnNavigationPropertyChanged("SysPersonToPosition");
                }
            }
        }
        private TrackableCollection<SysPersonToPosition> _sysPersonToPosition;
    
        [DataMember]
        public SysDepartment SysDepartment
        {
            get { return _sysDepartment; }
            set
            {
                if (!ReferenceEquals(_sysDepartment, value))
                {
                    var previousValue = _sysDepartment;
                    _sysDepartment = value;
                    FixupSysDepartment(previousValue);
                    OnNavigationPropertyChanged("SysDepartment");
                }
            }
        }
        private SysDepartment _sysDepartment;
    
        [DataMember]
        public SysPosition SysPositionParent
        {
            get { return _sysPositionParent; }
            set
            {
                if (!ReferenceEquals(_sysPositionParent, value))
                {
                    var previousValue = _sysPositionParent;
                    _sysPositionParent = value;
                    FixupSysPositionParent(previousValue);
                    OnNavigationPropertyChanged("SysPositionParent");
                }
            }
        }
        private SysPosition _sysPositionParent;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SysPersonToPosition.Clear();
            SysDepartment = null;
            SysPositionParent = null;
        }

        #endregion
        #region 关联修复
    
        private void FixupSysDepartment(SysDepartment previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SysPosition.Contains(this))
            {
                previousValue.SysPosition.Remove(this);
            }
    
            if (SysDepartment != null)
            {
                if (!SysDepartment.SysPosition.Contains(this))
                {
                    SysDepartment.SysPosition.Add(this);
                }
    
                DepartmentId = SysDepartment.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SysDepartment")
                    && (ChangeTracker.OriginalValues["SysDepartment"] == SysDepartment))
                {
                    ChangeTracker.OriginalValues.Remove("SysDepartment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SysDepartment", previousValue);
                }
                if (SysDepartment != null && !SysDepartment.ChangeTracker.ChangeTrackingEnabled)
                {
                    SysDepartment.StartTracking();
                }
            }
        }
    
        private void FixupSysPositionParent(SysPosition previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (SysPositionParent != null)
            {
                ParentId = SysPositionParent.ID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SysPositionParent")
                    && (ChangeTracker.OriginalValues["SysPositionParent"] == SysPositionParent))
                {
                    ChangeTracker.OriginalValues.Remove("SysPositionParent");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SysPositionParent", previousValue);
                }
                if (SysPositionParent != null && !SysPositionParent.ChangeTracker.ChangeTrackingEnabled)
                {
                    SysPositionParent.StartTracking();
                }
            }
        }
    
        private void FixupSysPersonToPosition(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SysPersonToPosition item in e.NewItems)
                {
                    item.SysPosition = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SysPersonToPosition", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SysPersonToPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.SysPosition, this))
                    {
                        item.SysPosition = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SysPersonToPosition", item);
                    }
                }
            }
        }

        #endregion
    }
}
