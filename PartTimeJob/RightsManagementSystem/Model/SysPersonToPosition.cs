//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RightsManagementSystem.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SysPerson))]
    [KnownType(typeof(SysPosition))]
    public partial class SysPersonToPosition: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public string ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private string _iD;
    
        [DataMember]
        public string PersonId
        {
            get { return _personId; }
            set
            {
                if (_personId != value)
                {
                    ChangeTracker.RecordOriginalValue("PersonId", _personId);
                    if (!IsDeserializing)
                    {
                        if (SysPerSon != null && SysPerSon.ID != value)
                        {
                            SysPerSon = null;
                        }
                    }
                    _personId = value;
                    OnPropertyChanged("PersonId");
                }
            }
        }
        private string _personId;
    
        [DataMember]
        public string PositionId
        {
            get { return _positionId; }
            set
            {
                if (_positionId != value)
                {
                    ChangeTracker.RecordOriginalValue("PositionId", _positionId);
                    if (!IsDeserializing)
                    {
                        if (SysPosition != null && SysPosition.ID != value)
                        {
                            SysPosition = null;
                        }
                    }
                    _positionId = value;
                    OnPropertyChanged("PositionId");
                }
            }
        }
        private string _positionId;
    
        [DataMember]
        public string FlagPrimacy
        {
            get { return _flagPrimacy; }
            set
            {
                if (_flagPrimacy != value)
                {
                    _flagPrimacy = value;
                    OnPropertyChanged("FlagPrimacy");
                }
            }
        }
        private string _flagPrimacy;

        #endregion
        #region 导航属性
    
        [DataMember]
        public SysPerson SysPerSon
        {
            get { return _sysPerSon; }
            set
            {
                if (!ReferenceEquals(_sysPerSon, value))
                {
                    var previousValue = _sysPerSon;
                    _sysPerSon = value;
                    FixupSysPerSon(previousValue);
                    OnNavigationPropertyChanged("SysPerSon");
                }
            }
        }
        private SysPerson _sysPerSon;
    
        [DataMember]
        public SysPosition SysPosition
        {
            get { return _sysPosition; }
            set
            {
                if (!ReferenceEquals(_sysPosition, value))
                {
                    var previousValue = _sysPosition;
                    _sysPosition = value;
                    FixupSysPosition(previousValue);
                    OnNavigationPropertyChanged("SysPosition");
                }
            }
        }
        private SysPosition _sysPosition;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SysPerSon = null;
            SysPosition = null;
        }

        #endregion
        #region 关联修复
    
        private void FixupSysPerSon(SysPerson previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SysPersonToPosition.Contains(this))
            {
                previousValue.SysPersonToPosition.Remove(this);
            }
    
            if (SysPerSon != null)
            {
                if (!SysPerSon.SysPersonToPosition.Contains(this))
                {
                    SysPerSon.SysPersonToPosition.Add(this);
                }
    
                PersonId = SysPerSon.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SysPerSon")
                    && (ChangeTracker.OriginalValues["SysPerSon"] == SysPerSon))
                {
                    ChangeTracker.OriginalValues.Remove("SysPerSon");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SysPerSon", previousValue);
                }
                if (SysPerSon != null && !SysPerSon.ChangeTracker.ChangeTrackingEnabled)
                {
                    SysPerSon.StartTracking();
                }
            }
        }
    
        private void FixupSysPosition(SysPosition previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SysPersonToPosition.Contains(this))
            {
                previousValue.SysPersonToPosition.Remove(this);
            }
    
            if (SysPosition != null)
            {
                if (!SysPosition.SysPersonToPosition.Contains(this))
                {
                    SysPosition.SysPersonToPosition.Add(this);
                }
    
                PositionId = SysPosition.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SysPosition")
                    && (ChangeTracker.OriginalValues["SysPosition"] == SysPosition))
                {
                    ChangeTracker.OriginalValues.Remove("SysPosition");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SysPosition", previousValue);
                }
                if (SysPosition != null && !SysPosition.ChangeTracker.ChangeTrackingEnabled)
                {
                    SysPosition.StartTracking();
                }
            }
        }

        #endregion
    }
}
