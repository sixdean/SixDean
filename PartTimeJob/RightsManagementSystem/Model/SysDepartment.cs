//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RightsManagementSystem.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SysPosition))]
    [KnownType(typeof(SysDepartment))]
    public partial class SysDepartment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public string ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private string _iD;
    
        [DataMember]
        public string DepartmentName
        {
            get { return _departmentName; }
            set
            {
                if (_departmentName != value)
                {
                    _departmentName = value;
                    OnPropertyChanged("DepartmentName");
                }
            }
        }
        private string _departmentName;
    
        [DataMember]
        public string ParentId
        {
            get { return _parentId; }
            set
            {
                if (_parentId != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentId", _parentId);
                    if (!IsDeserializing)
                    {
                        if (SysDepartmentParent != null && SysDepartmentParent.ID != value)
                        {
                            SysDepartmentParent = null;
                        }
                    }
                    _parentId = value;
                    OnPropertyChanged("ParentId");
                }
            }
        }
        private string _parentId;
    
        [DataMember]
        public string Sort
        {
            get { return _sort; }
            set
            {
                if (_sort != value)
                {
                    _sort = value;
                    OnPropertyChanged("Sort");
                }
            }
        }
        private string _sort;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private string _status;

        #endregion
        #region 导航属性
    
        [DataMember]
        public TrackableCollection<SysPosition> SysPosition
        {
            get
            {
                if (_sysPosition == null)
                {
                    _sysPosition = new TrackableCollection<SysPosition>();
                    _sysPosition.CollectionChanged += FixupSysPosition;
                }
                return _sysPosition;
            }
            set
            {
                if (!ReferenceEquals(_sysPosition, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_sysPosition != null)
                    {
                        _sysPosition.CollectionChanged -= FixupSysPosition;
                    }
                    _sysPosition = value;
                    if (_sysPosition != null)
                    {
                        _sysPosition.CollectionChanged += FixupSysPosition;
                    }
                    OnNavigationPropertyChanged("SysPosition");
                }
            }
        }
        private TrackableCollection<SysPosition> _sysPosition;
    
        [DataMember]
        public SysDepartment SysDepartmentParent
        {
            get { return _sysDepartmentParent; }
            set
            {
                if (!ReferenceEquals(_sysDepartmentParent, value))
                {
                    var previousValue = _sysDepartmentParent;
                    _sysDepartmentParent = value;
                    FixupSysDepartmentParent(previousValue);
                    OnNavigationPropertyChanged("SysDepartmentParent");
                }
            }
        }
        private SysDepartment _sysDepartmentParent;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SysPosition.Clear();
            SysDepartmentParent = null;
        }

        #endregion
        #region 关联修复
    
        private void FixupSysDepartmentParent(SysDepartment previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (SysDepartmentParent != null)
            {
                ParentId = SysDepartmentParent.ID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SysDepartmentParent")
                    && (ChangeTracker.OriginalValues["SysDepartmentParent"] == SysDepartmentParent))
                {
                    ChangeTracker.OriginalValues.Remove("SysDepartmentParent");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SysDepartmentParent", previousValue);
                }
                if (SysDepartmentParent != null && !SysDepartmentParent.ChangeTracker.ChangeTrackingEnabled)
                {
                    SysDepartmentParent.StartTracking();
                }
            }
        }
    
        private void FixupSysPosition(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SysPosition item in e.NewItems)
                {
                    item.SysDepartment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SysPosition", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SysPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.SysDepartment, this))
                    {
                        item.SysDepartment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SysPosition", item);
                    }
                }
            }
        }

        #endregion
    }
}
