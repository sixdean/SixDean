//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RightsManagementSystem.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SysMenu))]
    public partial class SysMenu: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public string ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private string _iD;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string ParentId
        {
            get { return _parentId; }
            set
            {
                if (_parentId != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentId", _parentId);
                    if (!IsDeserializing)
                    {
                        if (SysMenuParent != null && SysMenuParent.ID != value)
                        {
                            SysMenuParent = null;
                        }
                    }
                    _parentId = value;
                    OnPropertyChanged("ParentId");
                }
            }
        }
        private string _parentId;
    
        [DataMember]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    OnPropertyChanged("Url");
                }
            }
        }
        private string _url;
    
        [DataMember]
        public string Iconic
        {
            get { return _iconic; }
            set
            {
                if (_iconic != value)
                {
                    _iconic = value;
                    OnPropertyChanged("Iconic");
                }
            }
        }
        private string _iconic;
    
        [DataMember]
        public string Sort
        {
            get { return _sort; }
            set
            {
                if (_sort != value)
                {
                    _sort = value;
                    OnPropertyChanged("Sort");
                }
            }
        }
        private string _sort;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private string _status;

        #endregion
        #region 导航属性
    
        [DataMember]
        public SysMenu SysMenuParent
        {
            get { return _sysMenuParent; }
            set
            {
                if (!ReferenceEquals(_sysMenuParent, value))
                {
                    var previousValue = _sysMenuParent;
                    _sysMenuParent = value;
                    FixupSysMenuParent(previousValue);
                    OnNavigationPropertyChanged("SysMenuParent");
                }
            }
        }
        private SysMenu _sysMenuParent;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SysMenuParent = null;
        }

        #endregion
        #region 关联修复
    
        private void FixupSysMenuParent(SysMenu previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (SysMenuParent != null)
            {
                ParentId = SysMenuParent.ID;
            }
    
            else if (!skipKeys)
            {
                ParentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SysMenuParent")
                    && (ChangeTracker.OriginalValues["SysMenuParent"] == SysMenuParent))
                {
                    ChangeTracker.OriginalValues.Remove("SysMenuParent");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SysMenuParent", previousValue);
                }
                if (SysMenuParent != null && !SysMenuParent.ChangeTracker.ChangeTrackingEnabled)
                {
                    SysMenuParent.StartTracking();
                }
            }
        }

        #endregion
    }
}
