//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TestCon.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Menu))]
    public partial class Menu: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public string ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private string _iD;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    OnPropertyChanged("Url");
                }
            }
        }
        private string _url;
    
        [DataMember]
        public string Iconic
        {
            get { return _iconic; }
            set
            {
                if (_iconic != value)
                {
                    _iconic = value;
                    OnPropertyChanged("Iconic");
                }
            }
        }
        private string _iconic;
    
        [DataMember]
        public string Sort
        {
            get { return _sort; }
            set
            {
                if (_sort != value)
                {
                    _sort = value;
                    OnPropertyChanged("Sort");
                }
            }
        }
        private string _sort;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private string _status;

        #endregion
        #region 导航属性
    
        [DataMember]
        public TrackableCollection<Menu> Menu1
        {
            get
            {
                if (_menu1 == null)
                {
                    _menu1 = new TrackableCollection<Menu>();
                    _menu1.CollectionChanged += FixupMenu1;
                }
                return _menu1;
            }
            set
            {
                if (!ReferenceEquals(_menu1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_menu1 != null)
                    {
                        _menu1.CollectionChanged -= FixupMenu1;
                    }
                    _menu1 = value;
                    if (_menu1 != null)
                    {
                        _menu1.CollectionChanged += FixupMenu1;
                    }
                    OnNavigationPropertyChanged("Menu1");
                }
            }
        }
        private TrackableCollection<Menu> _menu1;
    
        [DataMember]
        public Menu Menu2
        {
            get { return _menu2; }
            set
            {
                if (!ReferenceEquals(_menu2, value))
                {
                    var previousValue = _menu2;
                    _menu2 = value;
                    FixupMenu2(previousValue);
                    OnNavigationPropertyChanged("Menu2");
                }
            }
        }
        private Menu _menu2;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Menu1.Clear();
            Menu2 = null;
            FixupMenu2Keys();
        }

        #endregion
        #region 关联修复
    
        private void FixupMenu2(Menu previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Menu1.Contains(this))
            {
                previousValue.Menu1.Remove(this);
            }
    
            if (Menu2 != null)
            {
                if (!Menu2.Menu1.Contains(this))
                {
                    Menu2.Menu1.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Menu2")
                    && (ChangeTracker.OriginalValues["Menu2"] == Menu2))
                {
                    ChangeTracker.OriginalValues.Remove("Menu2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Menu2", previousValue);
                }
                if (Menu2 != null && !Menu2.ChangeTracker.ChangeTrackingEnabled)
                {
                    Menu2.StartTracking();
                }
                FixupMenu2Keys();
            }
        }
    
        private void FixupMenu2Keys()
        {
            const string IDKeyName = "Menu2.ID";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IDKeyName))
            {
                if(Menu2 == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IDKeyName], Menu2.ID))
                {
                    ChangeTracker.RecordOriginalValue(IDKeyName, ChangeTracker.ExtendedProperties[IDKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IDKeyName);
            }
        }
    
        private void FixupMenu1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Menu item in e.NewItems)
                {
                    item.Menu2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Menu1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Menu item in e.OldItems)
                {
                    if (ReferenceEquals(item.Menu2, this))
                    {
                        item.Menu2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Menu1", item);
                    }
                }
            }
        }

        #endregion
    }
}
